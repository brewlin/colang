package  main

import fmt

struct test{
	i8 a
	i8 b
	i8 c
	i8 d
	i8 e
	i8 f
	i8 g
	i8 h
}
struct pointer{
	i8* up
}
# i8测试
func i8_test(){
	p<test> = new test
	member = func(p<test>){
		pp<pointer> = new pointer
		pp.up = p
		for(i = 1 ; i <= 8 ; i += 1 ){
			fmt.assert(int(*pp.up),i)
			pp.up += 1
		}
		fmt.println("test member pointer + success")
	}
	# 测试 变量指针 +
	var = func(p<test>){
		p.a = 1 p.b = 2 p.c = 3 p.d = 4 p.e = 5 p.f = 6 p.g = 7 p.h = 8
		pp<i8*> = p
		for(i = 1 ; i <= 8 ; i += 1 ){
			fmt.assert(int(*pp),i)
			pp += 1
		}
		fmt.println("test var pointer + success")
	}
	var(p)
	member(p)
}

struct testu8{
	u8 a
	u8 b
	u8 c
	u8 d
	u8 e
	u8 f
	u8 g
	u8 h
}
struct pu8{
	u8* p
}
func u8_test(){
	p<testu8> = new testu8
	# 初始化值 u8 范围为 0 - 255
	pp<u8*> = p
	for(i = 100 ; i <= 108 ; i += 1){ 
		*pp = *i 
		pp += 1
	}
	member = func(p<testu8>){
		pp<pu8> = new pu8
		pp.p = p
		for(i = 100 ; i <= 108 ; i += 1 ){
			fmt.assert(int(*pp.p),i)
			pp.p = pp.p + 1
		}
		fmt.println("test member pointer + success")
	}
	# 测试 变量指针 +
	var = func(p<testu8>){
		pp<i8*> = p
		for(i = 100 ; i < 108 ; i += 1 ){
			fmt.assert(int(*pp),i)
			pp += 1
		}
		fmt.println("test var pointer + success")
	}
	var(p)
	member(p)
}
func main(){
	i8_test()
	u8_test()
}